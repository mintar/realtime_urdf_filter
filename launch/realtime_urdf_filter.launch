<launch>
  <!-- run as nodelet? (this crashes a lot!) -->
  <arg name="nodelet" default="true"/>
  <arg name="camera" default="head_mount_kinect" />

  <param name="use_sim_time" value="true" />

  <include file="$(find openni2_launch)/launch/openni2.launch">
    <arg name="camera" value="$(arg camera)" />
    <arg name="depth_registration" value="true" />
    <arg name="load_driver" value="false" />
    <arg name="publish_tf" value="true" />
  </include>

  <!-- Load the URDF -->
  <param name="robot_description" textfile="$(find kuka_lbr_urdf)/urdf/kuka_lbr.urdf"/>

  <group ns="$(arg camera)">
    <!-- Nodelet manager -->
    <node pkg="nodelet" type="nodelet" args="manager" name="$(arg camera)_nodelet_manager_filtered" output="screen" />

    <!-- Launch nodelet -->
    <node if="$(arg nodelet)" pkg="nodelet" type="nodelet" name="realtime_urdf_filter_nodelet" args="load realtime_urdf_filter/RealtimeURDFFilterNodelet $(arg camera)_nodelet_manager_filtered --no-bond" output="screen">
      <remap from="~input_depth" to="depth_registered/hw_registered/image_rect_raw"/>
      <remap from="depth_registered/hw_registered/camera_info" to="depth_registered/camera_info"/>
      <remap from="~output_depth" to="depth_registered_filtered/hw_registered/image_rect_raw" />
      <remap from="~output_mask" to="/urdf_filtered_mask" />

      <rosparam command="load" file="$(find realtime_urdf_filter)/launch/filter_parameters.yaml"/>
    </node>

    <node unless="$(arg nodelet)" pkg="realtime_urdf_filter" type="realtime_urdf_filter" name="$(anon realtime_urdf_filter)" output="screen">
      <remap from="~input_depth" to="depth_registered/hw_registered/image_rect_raw"/>
      <remap from="depth_registered/hw_registered/camera_info" to="depth_registered/camera_info"/>
      <remap from="~output_depth" to="depth_registered_filtered/hw_registered/image_rect_raw" />
      <remap from="~output_mask" to="/urdf_filtered_mask" />

      <rosparam command="load" file="$(find realtime_urdf_filter)/launch/filter_parameters.yaml"/>
    </node>

    <!-- Convert filtered depth image to point cloud -->
    <node pkg="nodelet" type="nodelet" name="$(arg camera)_points_xyzrgb_filtered"
      args="load depth_image_proc/point_cloud_xyzrgb $(arg camera)_nodelet_manager_filtered" output="screen">
      <remap from="depth_registered/image_rect" to="depth_registered_filtered/hw_registered/image_rect_raw"/>
      <remap from="depth_registered/points" to="depth_registered/filtered_points"/>
    </node>
  </group>

  <!-- joint state publisher with gui -->
  <param name="use_gui" value="true" />
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher">
    <!-- joints at time microseconds: 1444919143512354 (in rocklog) -->
    <rosparam param="zeros">
        kuka_lbr_l_joint_1: -1.1804315909695302
        kuka_lbr_l_joint_2: 1.1215726284323944
        kuka_lbr_l_joint_3: 0.6500091381982209
        kuka_lbr_l_joint_4: -0.8300540209911509
        kuka_lbr_l_joint_5: -0.41944077655932693
        kuka_lbr_l_joint_6: -0.01006051707455561
        kuka_lbr_l_joint_7: 1.2400760596614133
        kuka_lbr_r_joint_1: 0.0
        kuka_lbr_r_joint_2: 0.0
        kuka_lbr_r_joint_3: 0.0
        kuka_lbr_r_joint_4: 0.0
        kuka_lbr_r_joint_5: 0.0
        kuka_lbr_r_joint_6: 0.0
        kuka_lbr_r_joint_7: 0.0
    </rosparam>
  </node>

  <!-- robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" />

  <node pkg="tf" type="static_transform_publisher" name="tf_publisher"
    args="-0.045 0.000 0.000 0.5 -0.5 0.5 0.5 kuka_lbr_top_right_camera head_mount_kinect_link 100" />

  <!-- tf publisher -->
  <!-- <node pkg="tf_publisher_gui" type="tf_publisher_gui" name="tf_publisher_gui" output="screen">
    <param name="parent_frame" value="kuka_lbr_top_right_camera" />
    <param name="child_frame" value="head_mount_kinect_link" />

    <param name="rate" value="100.0" />
  </node> -->
</launch>
